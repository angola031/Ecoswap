#!/usr/bin/env node

/**
 * Script para verificar la configuraci√≥n en producci√≥n
 * Espec√≠ficamente para cuando las variables est√°n en Vercel
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

// En producci√≥n, las variables vienen de Vercel
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 'http://localhost:3000'

console.log('üîç Verificando configuraci√≥n en producci√≥n\n')

// Verificar variables de entorno
console.log('üìã Variables de entorno:')
console.log('   - NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl || '‚ùå NO CONFIGURADA')
console.log('   - SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ Configurada' : '‚ùå NO CONFIGURADA')
console.log('   - NEXT_PUBLIC_SITE_URL:', process.env.NEXT_PUBLIC_SITE_URL || 'No configurada')
console.log('   - VERCEL_URL:', process.env.VERCEL_URL || 'No configurada')
console.log('   - Site URL calculada:', siteUrl)

if (!supabaseUrl || !supabaseServiceKey) {
    console.log('\n‚ùå PROBLEMA: Variables de entorno faltantes')
    console.log('   - Verifica que las variables est√©n configuradas en Vercel')
    console.log('   - NEXT_PUBLIC_SUPABASE_URL debe estar configurada')
    console.log('   - SUPABASE_SERVICE_ROLE_KEY debe estar configurada')
    process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkSupabaseRedirectUrls() {
    console.log('\nüîó Verificando URLs de redirecci√≥n en Supabase...')
    
    // URLs que deber√≠an estar configuradas en Supabase
    const expectedUrls = [
        `${siteUrl}/auth/callback`,
        `${siteUrl}/auth/reset-password`,
        `${siteUrl}/auth/auth-code-error`
    ]
    
    console.log('üìã URLs que deber√≠an estar configuradas en Supabase:')
    expectedUrls.forEach(url => {
        console.log('   -', url)
    })
    
    console.log('\nüí° Para configurar en Supabase Dashboard:')
    console.log('   1. Ve a https://supabase.com/dashboard')
    console.log('   2. Selecciona tu proyecto')
    console.log('   3. Ve a Authentication > URL Configuration')
    console.log('   4. Agrega las URLs de arriba a "Redirect URLs"')
    console.log('   5. Guarda los cambios')
}

async function testPasswordResetFlow() {
    console.log('\nüß™ Probando flujo de restablecimiento...')
    
    const testEmail = 'test@example.com'
    const redirectUrl = `${siteUrl}/auth/callback?next=/auth/reset-password`
    
    console.log('üìß Email de prueba:', testEmail)
    console.log('üîó URL de redirecci√≥n:', redirectUrl)
    
    try {
        const { data, error } = await supabase.auth.admin.generateLink({
            type: 'recovery',
            email: testEmail,
            options: {
                redirectTo: redirectUrl
            }
        })
        
        if (error) {
            console.log('‚ùå Error generando enlace:', error.message)
            return false
        }
        
        console.log('‚úÖ Enlace generado exitosamente')
        console.log('üìß Email enviado:', data.properties?.email_sent ? 'S√≠' : 'No')
        
        if (data.properties?.action_link) {
            console.log('\nüîó Enlace generado:')
            console.log('   ', data.properties.action_link)
            
            // Analizar el enlace
            const url = new URL(data.properties.action_link)
            console.log('\nüìä An√°lisis del enlace:')
            console.log('   - Dominio:', url.hostname)
            console.log('   - Path:', url.pathname)
            console.log('   - Par√°metros:', url.searchParams.toString())
            
            // Verificar par√°metros importantes
            const code = url.searchParams.get('code')
            const next = url.searchParams.get('next')
            const type = url.searchParams.get('type')
            
            console.log('   - C√≥digo presente:', code ? '‚úÖ' : '‚ùå')
            console.log('   - Par√°metro next:', next || 'No presente')
            console.log('   - Tipo:', type || 'No presente')
            
            if (next === '/auth/reset-password') {
                console.log('   ‚úÖ Par√°metro next configurado correctamente')
            } else {
                console.log('   ‚ö†Ô∏è  Par√°metro next no configurado o incorrecto')
            }
        }
        
        return true
        
    } catch (error) {
        console.log('‚ùå Error inesperado:', error.message)
        return false
    }
}

async function checkUserExists() {
    console.log('\nüë§ Verificando usuarios en Supabase...')
    
    try {
        const { data, error } = await supabase.auth.admin.listUsers({ page: 1, perPage: 5 })
        
        if (error) {
            console.log('‚ùå Error consultando usuarios:', error.message)
            return false
        }
        
        console.log('‚úÖ Conexi√≥n a Supabase exitosa')
        console.log('üë• Total de usuarios:', data.total || 'No disponible')
        
        if (data.users && data.users.length > 0) {
            console.log('üìã Primeros usuarios:')
            data.users.forEach((user, index) => {
                console.log(`   ${index + 1}. ${user.email} (${user.email_confirmed_at ? 'Confirmado' : 'No confirmado'})`)
            })
        }
        
        return true
        
    } catch (error) {
        console.log('‚ùå Error inesperado:', error.message)
        return false
    }
}

async function main() {
    console.log('üöÄ Verificaci√≥n de configuraci√≥n en producci√≥n\n')
    
    const supabaseOk = await checkSupabaseRedirectUrls()
    const usersOk = await checkUserExists()
    const flowOk = await testPasswordResetFlow()
    
    console.log('\nüìä Resumen de verificaci√≥n:')
    console.log('   - Configuraci√≥n Supabase:', supabaseOk ? '‚úÖ' : '‚ùå')
    console.log('   - Usuarios:', usersOk ? '‚úÖ' : '‚ùå')
    console.log('   - Flujo de reset:', flowOk ? '‚úÖ' : '‚ùå')
    
    if (supabaseOk && usersOk && flowOk) {
        console.log('\n‚úÖ ¬°Configuraci√≥n correcta!')
        console.log('   - El restablecimiento de contrase√±a deber√≠a funcionar')
        console.log('   - Verifica que las URLs est√©n configuradas en Supabase Dashboard')
    } else {
        console.log('\n‚ùå Problemas encontrados')
        console.log('   - Revisa la configuraci√≥n en Supabase Dashboard')
        console.log('   - Verifica las variables de entorno en Vercel')
    }
    
    console.log('\nüîß Pasos para solucionar:')
    console.log('   1. Configura las URLs de redirecci√≥n en Supabase Dashboard')
    console.log('   2. Verifica que las variables est√©n en Vercel')
    console.log('   3. Prueba el flujo completo en producci√≥n')
    console.log('   4. Revisa los logs de Vercel para debugging')
}

// Ejecutar si es llamado directamente
if (require.main === module) {
    main().catch(console.error)
}

module.exports = { checkSupabaseRedirectUrls, testPasswordResetFlow, checkUserExists }
