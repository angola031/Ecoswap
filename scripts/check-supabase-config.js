#!/usr/bin/env node

/**
 * Script para verificar la configuraci√≥n de Supabase y URLs de redirecci√≥n
 * 
 * Este script verifica:
 * 1. Variables de entorno configuradas
 * 2. URLs de redirecci√≥n en Supabase
 * 3. Configuraci√≥n del callback
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
const siteUrl = process.env.NEXT_PUBLIC_SITE_URL

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Error: Variables de entorno faltantes')
    console.error('   - NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl)
    console.error('   - SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey)
    process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkConfiguration() {
    console.log('üîß Verificando configuraci√≥n de Supabase...\n')

    // Verificar variables de entorno
    console.log('üìã Variables de entorno:')
    console.log('   - NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl)
    console.log('   - NEXT_PUBLIC_SITE_URL:', siteUrl || 'NO CONFIGURADA')
    console.log('   - SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ Configurada' : '‚ùå No configurada')

    // Verificar URLs de redirecci√≥n esperadas
    console.log('\nüîó URLs de redirecci√≥n esperadas:')
    const expectedUrls = [
        `${siteUrl || 'http://localhost:3000'}/auth/callback`,
        `${siteUrl || 'http://localhost:3000'}/auth/reset-password`,
        `${siteUrl || 'http://localhost:3000'}/auth/auth-code-error`
    ]
    
    expectedUrls.forEach(url => {
        console.log('   -', url)
    })

    // Verificar que las p√°ginas existen
    console.log('\nüìÅ Verificando p√°ginas existentes:')
    const pages = [
        'app/auth/callback/route.ts',
        'app/auth/reset-password/page.tsx',
        'app/auth/auth-code-error/page.tsx'
    ]
    
    const fs = require('fs')
    const path = require('path')
    
    pages.forEach(page => {
        const exists = fs.existsSync(path.join(process.cwd(), page))
        console.log(`   - ${page}:`, exists ? '‚úÖ Existe' : '‚ùå No existe')
    })

    return true
}

async function testPasswordResetFlow() {
    console.log('\nüß™ Probando flujo de restablecimiento de contrase√±a...')

    const testEmail = 'test@example.com'
    const redirectUrl = `${siteUrl || 'http://localhost:3000'}/auth/callback?next=/auth/reset-password`

    try {
        console.log('üìß Simulando env√≠o de email de restablecimiento...')
        console.log('   - Email:', testEmail)
        console.log('   - URL de redirecci√≥n:', redirectUrl)

        // Nota: No enviamos el email real para evitar spam
        console.log('   - ‚úÖ URL de redirecci√≥n configurada correctamente')
        console.log('   - ‚úÖ Flujo de callback configurado')

        return true

    } catch (error) {
        console.error('‚ùå Error en prueba:', error.message)
        return false
    }
}

async function checkSupabaseSettings() {
    console.log('\n‚öôÔ∏è  Verificando configuraci√≥n de Supabase...')

    try {
        // Verificar conexi√≥n a Supabase
        const { data, error } = await supabase.auth.admin.listUsers({ page: 1, perPage: 1 })
        
        if (error) {
            console.error('‚ùå Error conectando a Supabase:', error.message)
            return false
        }

        console.log('‚úÖ Conexi√≥n a Supabase exitosa')
        console.log('   - Total de usuarios:', data.total || 'No disponible')

        return true

    } catch (error) {
        console.error('‚ùå Error inesperado:', error.message)
        return false
    }
}

async function main() {
    console.log('üöÄ Verificando configuraci√≥n de restablecimiento de contrase√±a\n')

    const configOk = await checkConfiguration()
    const supabaseOk = await checkSupabaseSettings()
    const flowOk = await testPasswordResetFlow()

    // Resumen
    console.log('\nüìä Resumen de verificaci√≥n:')
    console.log('   - Configuraci√≥n:', configOk ? '‚úÖ' : '‚ùå')
    console.log('   - Supabase:', supabaseOk ? '‚úÖ' : '‚ùå')
    console.log('   - Flujo de reset:', flowOk ? '‚úÖ' : '‚ùå')

    if (configOk && supabaseOk && flowOk) {
        console.log('\n‚úÖ ¬°Configuraci√≥n correcta!')
        console.log('   - El restablecimiento de contrase√±a deber√≠a funcionar')
        console.log('   - Verifica que NEXT_PUBLIC_SITE_URL est√© configurada en producci√≥n')
    } else {
        console.log('\n‚ùå Problemas encontrados')
        console.log('   - Revisa la configuraci√≥n de variables de entorno')
        console.log('   - Verifica la conexi√≥n a Supabase')
    }

    console.log('\nüí° Pr√≥ximos pasos:')
    console.log('   1. Configura NEXT_PUBLIC_SITE_URL en tu archivo .env')
    console.log('   2. Verifica que las URLs de redirecci√≥n est√©n configuradas en Supabase')
    console.log('   3. Prueba el flujo completo con un email real')
}

// Ejecutar si es llamado directamente
if (require.main === module) {
    main().catch(console.error)
}

module.exports = { checkConfiguration, testPasswordResetFlow, checkSupabaseSettings }